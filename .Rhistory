labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright", pal = pal, values = ~value2,
title = "",
labFormat = labelFormat(prefix = "$"),
opacity = 1
)
m
m <- leaflet(world2, options = leafletOptions(crs = epsg8857)) %>%
addTiles() %>%
addPolygons(
fillColor = ~pal(value2),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = world2$NAME_EN,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright", pal = pal, values = ~value2,
title = "",
labFormat = labelFormat(prefix = "$"),
opacity = 1
)
m
library(flexdashboard)
library(readxl)
library(tidyverse)
library(reshape2)
library(plotly)
library(shiny)
library(WDI)
library(viridis)
library(ggiraph)
library(shinyscreenshot)
library(leaflet)
library(rgdal)
library(geojsonsf)
library(sf)
#source("01-data.R")
#setwd("C:/Users/wb482273/OneDrive - WBG/Data Visualization/CWON")
cwon <- read.csv("cwon.csv")
trmp <- read.csv("trmp.csv")
countrymeta <- read.csv("countrymeta.csv")
#url4 <- 'C:/Users/wb482273/OneDrive - WBG/Data #Visualization/CWON/WorldBank_CountryBoundaries.json'
#map_wb  <- geojson_sf(url4)
map_wb  <- geojson_sf('WorldBank_CountryBoundaries.json')
color_map <- c(
`East Asia & Pacific`        = "#e16a2d",
`Europe & Central Asia`      = "#eb1c2d",
`Latin America & Caribbean`  = "#00ab51",
`Middle East & North Africa` = "#872b90",
`North America`              = "#515151",
`South Asia`                 = "#055bb3",
`Sub-Saharan Africa`         = "#fdb714"
)
#epsg8857 <- leafletCRS(
#  code = "EPSG:8857",
#  proj4def = '+proj=eqearth +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs')
s <- cwon %>%
filter(varname == 'Human capital (constant 2018 US$)') %>%
group_by(country) %>%
filter(year == max(year)) %>%
select(wb_code, value2, country)
MapData <- merge(x = map_wb, y = s, by.x = "WB_A3", by.y = "wb_code", all = FALSE)
finalMap <- sf_geojson(st_as_sf(MapData))
world2 <- rgdal::readOGR(finalMap)
#bins <- c(0, 1000, 2000, 5000, 10000, 20000, Inf)
pal <- colorBin("YlOrRd", domain = world2$value2
#  , bins = bins
)
m <- leaflet(world2
#, options = leafletOptions(crs = epsg8857)
) %>%
addTiles() %>%
#  addProviderTiles(providers$Esri.WorldStreetMap) %>%
addPolygons(
fillColor = ~pal(value2),
weight = 1,
opacity = 1,
color = "white",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 2,
color = "lightgrey",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = world2$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright", pal = pal, values = ~value2,
title = "",
labFormat = labelFormat(prefix = "$"),
opacity = 1
)
m
m <- leaflet(world2
#, options = leafletOptions(crs = epsg8857)
) %>%
#  addTiles() %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addPolygons(
fillColor = ~pal(value2),
weight = 1,
opacity = 1,
color = "white",
dashArray = "1",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 2,
color = "lightgrey",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = world2$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright", pal = pal, values = ~value2,
title = "",
labFormat = labelFormat(prefix = "$"),
opacity = 1
)
m
install.packages("golem")
remove.packages(odbc)
remove.packages("odbc")
library(devtools)
library(devtools)
install_version("odbc", version = "1.2.2", repos = "http://cran.us.r-project.org")
shiny::runApp('testcwon')
runApp('testcwon')
View(MapData)
## Map
MapData <- merge(x = map_wb, y = cwon, by.x = "WB_A3", by.y = "wb_code")
View(MapData)
write.csv(MapData, "mapfile.csv")
shiny::runApp('test2cwon')
runApp('test2cwon')
runApp('test2cwon')
runApp('test2cwon')
runApp('test2cwon')
runApp('test2cwon')
runApp('test2cwon')
runApp('test2cwon')
runApp()
runApp('test2cwon')
library(readxl)
Statistician_GF_March2021 <- read_excel("C:/Users/wb482273/OneDrive - WBG/Interviews and Resume/Statistician-GF-March2021.xlsx")
View(Statistician_GF_March2021)
library(readxl)
st <- read_excel("C:/Users/wb482273/OneDrive - WBG/Interviews and Resume/Statistician-GF-March2021.xlsx")
View(st)
st2 <- st %>%
select("Req ID", "User Full Name", "Prscrn Question Desc", "User Response Score")
library(tidyverse)
st2 <- st %>%
select("Req ID", "User Full Name", "Prscrn Question Desc", "User Response Score")
?spread
st2 <- st %>%
select("Req ID", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
spread(key = c("Req ID", "User Full Name"))
library(reshape2)
?reshape
st2 <- st %>%
select("Req ID", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
reshape(idvar = c("Req ID", "User Full Name"))
st2 <- st %>%
select("Req ID", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
reshape(idvar = c("Req ID", "User Full Name"), direction = "wide")
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
reshape(idvar = c("User Guid", "User Full Name"), direction = "wide", time = "Prscrn Question Desc")
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
st3 <- reshape(st2, idvar = c("User Guid", "User Full Name"), direction = "wide", time = "Prscrn Question Desc")
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
st3 <- reshape(st2, idvar = c("User Guid", "User Full Name"), direction = "wide", varying = "Prscrn Question Desc")
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
st3 <- reshape(st2, idvar = c("User Guid", "User Full Name"), direction = "wide", varying = "Prscrn Question Desc")
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score")
st3 <- reshape(st2, idvar = c("User Guid", "User Full Name"), direction = "wide", varying = "Prscrn Question Desc")
st3 <- reshape(st2, idvar = c("User Guid", "User Full Name"), direction = "wide",
timevar = "Prscrn Question Desc")
View(st3)
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
mutate(`Prscrn Question Desc` = as.factor(`Prscrn Question Desc`))
st3 <- reshape(st2, idvar = c("User Guid", "User Full Name"), direction = "wide",
timevar = "Prscrn Question Desc")
View(st3)
View(st2)
st3 <- spread(st3, key = c(`User Guid`, `User Full Name`), value = `User Response Score`)
st3 <- spread(st2, key = c(`User Guid`, `User Full Name`), value = `User Response Score`)
st3 <- spread(st2, key = `User Guid`, value = `User Response Score`)
View(st3)
st3 <- spread(st2, key = `Prscrn Question Desc`, value = `User Response Score`)
View(st3)
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
spread(key = `Prscrn Question Desc`, value = `User Response Score`)
View(st2)
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
spread(key = `Prscrn Question Desc`, value = `User Response Score`) %>%
mutate(totalscore = `Do you have at least a Masters degree in data science, statistics, mathematics, economics or related discipline with a strong quantitative and computational background?` +
`Do you have at least five years of working experience in development and statistics, or two years of such working experience with a PhD?` +
`Do you have excellent English oral and written communication skills, including the ability to translate research findings into policy relevant language and data visualizations?` +
`Do you have experience with data management: data acquisition, cleaning, curation (including SQL databases), interpretation and analysis, and presentation and communication of reproducible results?` +
`Do you have experience with household surveys, administrative data, and statistical disclosure controls?` +
`Do you have familiarity and experience with climate science and policy?` +
`Do you have strong expertise in statistics, econometrics, statistical modeling, machine learning and related programming languages such as R, Python or other statistical packages?` +
`Do you have the ability and experience to think strategically and rapidly analyze, interpret and integrate data information from varied sources into clear conclusions and recommendations?`)
summary(st2$totalscore)
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
spread(key = `Prscrn Question Desc`, value = `User Response Score`) %>%
mutate(totalscore = (`Do you have at least a Masters degree in data science, statistics, mathematics, economics or related discipline with a strong quantitative and computational background?` +
`Do you have at least five years of working experience in development and statistics, or two years of such working experience with a PhD?` +
`Do you have excellent English oral and written communication skills, including the ability to translate research findings into policy relevant language and data visualizations?` +
`Do you have experience with data management: data acquisition, cleaning, curation (including SQL databases), interpretation and analysis, and presentation and communication of reproducible results?` +
`Do you have experience with household surveys, administrative data, and statistical disclosure controls?` +
`Do you have familiarity and experience with climate science and policy?` +
`Do you have strong expertise in statistics, econometrics, statistical modeling, machine learning and related programming languages such as R, Python or other statistical packages?` +
`Do you have the ability and experience to think strategically and rapidly analyze, interpret and integrate data information from varied sources into clear conclusions and recommendations?`, na.rm = T))
summary(factor(st2$totalscore))
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
spread(key = `Prscrn Question Desc`, value = `User Response Score`) %>%
mutate(totalscore = `Do you have at least a Masters degree in data science, statistics, mathematics, economics or related discipline with a strong quantitative and computational background?` +
`Do you have at least five years of working experience in development and statistics, or two years of such working experience with a PhD?` +
`Do you have excellent English oral and written communication skills, including the ability to translate research findings into policy relevant language and data visualizations?` +
`Do you have experience with data management: data acquisition, cleaning, curation (including SQL databases), interpretation and analysis, and presentation and communication of reproducible results?` +
`Do you have experience with household surveys, administrative data, and statistical disclosure controls?` +
#      `Do you have familiarity and experience with climate science and policy?` +
`Do you have strong expertise in statistics, econometrics, statistical modeling, machine learning and related programming languages such as R, Python or other statistical packages?` +
`Do you have the ability and experience to think strategically and rapidly analyze, interpret and integrate data information from varied sources into clear conclusions and recommendations?`)
summary(factor(st2$totalscore))
tna <- st2 %>%
filter(is.na(totalscore))
View(tna)
lwscore <- st2 %>%
filter(totalscore < 700)
View(lwscore)
View(lwscore)
st2 <- st %>%
select("User Guid", "User Full Name", "Prscrn Question Desc", "User Response Score") %>%
spread(key = `Prscrn Question Desc`, value = `User Response Score`) %>%
mutate(totalscore = `Do you have at least a Masters degree in data science, statistics, mathematics, economics or related discipline with a strong quantitative and computational background?` +
`Do you have at least five years of working experience in development and statistics, or two years of such working experience with a PhD?` +
`Do you have excellent English oral and written communication skills, including the ability to translate research findings into policy relevant language and data visualizations?` +
`Do you have experience with data management: data acquisition, cleaning, curation (including SQL databases), interpretation and analysis, and presentation and communication of reproducible results?` +
`Do you have experience with household surveys, administrative data, and statistical disclosure controls?` +
#      `Do you have familiarity and experience with climate science and policy?` +
`Do you have strong expertise in statistics, econometrics, statistical modeling, machine learning and related programming languages such as R, Python or other statistical packages?` +
`Do you have the ability and experience to think strategically and rapidly analyze, interpret and integrate data information from varied sources into clear conclusions and recommendations?`,
firstname = sub('.*,\\s*', '', `User Full Name`))
View(st2)
lwscore <- st2 %>%
filter(totalscore < 700)
View(lwscore)
shiny::runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
library(webshot)
install.packages("webshot")
library(webshot)
runApp('CWON-dashboard')
webshot::install_phantomjs()
runApp('CWON-dashboard')
library(webshot)
library(highcharter)
library(plyr)
data("citytemp")
plot <- highchart() %>%
hc_add_series(name = "London", data = citytemp$london, type = "area") %>%
hc_rm_series(name = "New York")
htmlwidgets::saveWidget(widget = plot, file = "~/plot.html")
setwd("~")
webshot::webshot(url = "plot.html",
file = "plot.png")
plot
library(webshot)
library(highcharter)
library(plyr)
install_phantomjs()
data("citytemp")
plot <- highchart() %>%
hc_add_series(name = "London", data = citytemp$london, type = "area") %>%
hc_rm_series(name = "New York")
# htmlwidgets::saveWidget(widget = plot, file = "~/plot.html")
# setwd("~")
# webshot::webshot(url = "plot.html",
#                  file = "plot.png")
plot
# Main code
plot$save("/tmp/rcharts.html")
webshot::webshot("/tmp/rcharts.html", file="/tmp/out.png", delay=2)
# Main code
plot$save("/rcharts.html")
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
shiny::runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
runApp('CWON-dashboard')
install.packages("orca")
library(highcharter)
library(plyr)
library(orca)
data("citytemp")
plot <- highchart() %>%
hc_add_series(name = "London", data = citytemp$london, type = "area") %>%
hc_rm_series(name = "New York")
# htmlwidgets::saveWidget(widget = plot, file = "~/plot.html")
# setwd("~")
# webshot::webshot(url = "plot.html",
#                  file = "plot.png")
plot
# Main code
#plot$save("/rcharts.html")
#webshot::webshot("/tmp/rcharts.html", file="/tmp/out.png", delay=2)
orca(plot, file = "image.png")
runApp('CWON-dashboard')
shiny::runApp('CWON-dashboard')
shiny::runApp('CWON-dashboard')
runApp('CWON-dashboard')
getwd()
create(wbincomeclass)
library(devtools)
library(roxygen2)
create(wbincomeclass)
create("wbincomeclass")
setwd("C:/Users/wb482273/OneDrive - WBG/Documents/wbincomeclass")
document()
document()
library(devtools)
library(roxygen2)
document()
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969") %>%
rename(countryname = country,
date = year)
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
hist <- data.table::setDT(hist)
names(hist)[names(hist) == "country"] = "countryname"
names(hist)[names(hist) == "year"] = "date"
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
data <- hist[date >= startyear & date <= endyear & wb_code %in% country,]
document()
library(devtools)
library(roxygen2)
document()
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
data <- hist[date >= first & date <= last & wb_code %in% all,]
hist <- data.table::setDT(hist)
names(hist)[names(hist) == "country"] = "countryname"
names(hist)[names(hist) == "year"] = "date"
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
data <- hist[date >= first & date <= last & wb_code %in% all,]
data <- hist[(date >= first) & (date <= last) & (wb_code %in% all),]
wbincomeclass(startyear = 2010, endyear = 2012, country = "ALB")
wbincomeclass <- function(country = all, startyear = first, endyear = last) {
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
hist <- data.table::setDT(hist)
names(hist)[names(hist) == "country"] = "countryname"
names(hist)[names(hist) == "year"] = "date"
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
data <- hist[date >= startyear & date <= endyear & wb_code %in% country,]
}
wbincomeclass(startyear = 2010, endyear = 2012, country = "ALB")
wbincomeclass <- function(country = all, startyear = first, endyear = last) {
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
hist <- data.table::setDT(hist)
names(hist)[names(hist) == "country"] = "countryname"
names(hist)[names(hist) == "year"] = "date"
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
data <- data.table::hist[date >= startyear & date <= endyear & wb_code %in% country,]
}
wbincomeclass(startyear = 2010, endyear = 2012, country = "ALB")
wbincomeclass <- function(country = all, startyear = first, endyear = last) {
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
hist <- data.table::setDT(hist)
names(hist)[names(hist) == "country"] = "countryname"
names(hist)[names(hist) == "year"] = "date"
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
data <- hist[date >= startyear & date <= endyear & wb_code %in% country,]
}
wbincomeclass()
dat<- wbincomeclass()
View(dat)
library(devtools)
library(roxygen2)
document()
rm(list = c("wbincomeclass"))
dat<- wbincomeclass()
wbincomeclass <- function(country = "IND", startyear = 1995, endyear = 2010) {
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
hist <- data.table::setDT(hist)
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
#  data <- hist[date >= startyear & date <= endyear & wb_code %in% country,]
data <- hist
}
dat <- wbincomeclass()
library(devtools)
document()
rm(list = c("wbincomeclass"))
wbincomeclass <- function(country = "IND", startyear = 1995, endyear = 2010) {
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
hist <- data.table::setDT(hist)
first <- min(hist$date)
last <- max(hist$date)
all <- unique(hist$wb_code)
data <- hist[date >= startyear,]
#  data <- hist[date >= startyear & date <= endyear & wb_code %in% country,]
}
dat<- wbincomeclass()
library(devtools)
library(roxygen2)
document()
rm(list = c("wbincomeclass"))
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
hist <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1ose4ar0k3Bfty_fLwYcOfIBKsYv_3GAqiJD41swczOA/edit#gid=744413969")
View(hist)
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
